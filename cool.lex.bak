/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;
import java.lang.String;
import java.lang.Character;

%%

%{

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition, all the extra variables/functions you want to use in the
 *  lexer actions should go here.  Don't remove or modify anything that
 *  was there initially.  */

    // Max size of string constants
    static int MAX_STR_CONST = 1025;
    // Mark the string is stop analyze
    static boolean str_stop = false;
    static boolean str_errmsg = "";
    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }

    String gen_err_comment_msg(String value) {
        StringBuffer sb = new StringBuffer();
        sb.append("currline:").append(get_curr_lineno());
        sb.append("invalid str:").append(value);
        return sb.toString();
    }
%}

%init{

/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */

    // empty for now
%init}

%eofval{

/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */

    switch(yy_lexical_state) {
    case YYINITIAL:
	/* nothing special to do in the initial state */
	break;
	/* If necessary, add code for other states here, e.g:
	   case COMMENT:
	   ...
	   break;
	*/
    }
    return new Symbol(TokenConstants.EOF);
%eofval}

%class CoolLexer
%cup

%state STROPEN
ALPHA=[A-Za-z]
DIGIT=[0-9]
NONNEWLINE_WHITE_SPACE_CHAR=[\ \t\b\012]
WHITE_SPACE_CHAR=[\n\ \t\b\012]
%%,

<YYINITIAL> "\""   {
    System.out.println("Enter into str open status");
    BEGIN(STROPEN);
}

<STROPEN> {
    System.out.println("Have found new character:" + yytext());
    String text = yytext();
    // 如果直接是回车符号,那么前面必须要有转义
    if(text.length() == 1 && text.charAt(0) == '\n'){
        if(string_buf.length() >= 1 && string_buf.charAt(sb.length()-1) == '\\'){
            string_buf.append('\n');
            return;
        }
    }
}

<YYINITIAL> \"   {
    return new Symbol(TokenConstants.LPAREN);
}

<YYINITIAL> "("   {
    return new Symbol(TokenConstants.LPAREN);
}

<YYINITIAL> ")"   {
    return new Symbol(TokenConstants.RPAREN);
}

<YYINITIAL> ","   {
    return new Symbol(TokenConstants.COMMA);
}

<YYINITIAL> "."   {
    return new Symbol(TokenConstants.DOT);
}

<YYINITIAL> ";"   {
    return new Symbol(TokenConstants.SEMI);
}

<YYINITIAL> [c|C][a|A][s|S][e|E]  {
     return new Symbol(TokenConstants.CASE);
}

<YYINITIAL> "-"   {
    return new Symbol(TokenConstants.MINUS);
}


<YYINITIAL> [n|N][o|O][t|T]   {
    return new Symbol(TokenConstants.NOT);
}


<YYINITIAL> "<"   {
    return new Symbol(TokenConstants.LT);
}

<YYINITIAL> "*"   {
    return new Symbol(TokenConstants.MULT);
}

<YYINITIAL> [i|I][n|N][h|H][e|E][r|R][i|I][t|T][s|S]   {
    return new Symbol(TokenConstants.INHERITS);
}

<YYINITIAL> "-" {
    return new Symbol(TokenConstants.MINUS);
}

<YYINITIAL> [i|I][n|N] {
    return new Symbol(TokenConstants.IN);
}

<YYINITIAL> [c|C][l|L][a|A][s|S][s|S] {
    return new Symbol(TokenConstants.CLASS);
}

<YYINITIAL> [f|F][i|I] {
    return new Symbol(TokenConstants.FI);
}

<YYINITIAL> [l|L][o|O][o|O][p|P] {
    return new Symbol(TokenConstants.LOOP);
}

<YYINITIAL> "+" {
    return new Symbol(TokenConstants.PLUS);
}

<YYINITIAL> "<-" {
    return new Symbol(TokenConstants.ASSIGN);
}

<YYINITIAL> [i|I][f|F] {
    return new Symbol(TokenConstants.IF);
}

<YYINITIAL> "<=" {
    return new Symbol(TokenConstants.LE);
}

<YYINITIAL> [n|N][e|E][w|W] {
    return new Symbol(TokenConstants.NEW);
}

<YYINITIAL> [i|I][s|S][v|V][o|O][i|I][d|D] {
    return new Symbol(TokenConstants.ISVOID);
}

<YYINITIAL> "==" {
    return new Symbol(TokenConstants.EQ);
}

<YYINITIAL> ":" {
    return new Symbol(TokenConstants.COLON);
}

<YYINITIAL> "~" {
    return new Symbol(TokenConstants.NEG);
}

<YYINITIAL> "{" {
    return new Symbol(TokenConstants.LBRACE);
}

<YYINITIAL> "}" {
    return new Symbol(TokenConstants.RBRACE);
}

<YYINITIAL> [e|E][l|L][s|S][e|E] {
    return new Symbol(TokenConstants.ELSE);
}

<YYINITIAL> [w|W][h|H][i|I][l|L][e|E] {
    return new Symbol(TokenConstants.WHILE);
}

<YYINITIAL> [eE][sS][aA][cC] {
    return new Symbol(TokenConstants.ESAC);
}

<YYINITIAL> [lL][eE][tT] {
    return new Symbol(TokenConstants.LET);
}

<YYINITIAL> [tT][hH][eE][nN] {
    return new Symbol(TokenConstants.THEN);
}

<YYINITIAL> "@" {
    return new Symbol(TokenConstants.AT);
}

<YYINITIAL> "/" {
    return new Symbol(TokenConstants.DIV);
}

<YYINITIAL> [pP][oO][oO][lL] {
    return new Symbol(TokenConstants.POOL);
}

<YYINITIAL> [oO][fF] {
    return new Symbol(TokenConstants.OF);
}


<YYINITIAL> t[rR][uU][eE] {
    return new Symbol(TokenConstants.BOOL_CONST, "true");
}

<YYINITIAL> f[aA][lL][sS][eE] {
    return new Symbol(TokenConstants.BOOL_CONST, "false");
}


<YYINITIAL>"=>" { /* Sample lexical rule for "=>" arrow.
                                     Further lexical rules should be defined
                                     here, after the last %% separator */
                                  return new Symbol(TokenConstants.DARROW); }

<YYINITIAL> . { /* This rule should be the very last
    in your lexical specification and
    will match match everything not
    matched by other lexical rules. */
    System.err.println("LEXER BUG - UNMATCHED: " + yytext()); 
}


