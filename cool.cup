/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* 
Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.

会单独拷贝到Parser中的一个私有类
  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it. 

terminal ${classname} name1, name2
其中${classname}表示terminal的value的类型
比如: terminal Boolean BOOL_CONST
其中的Boolean表示BOOL_CONST的token其中的value为Boolean类型
 */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Expression expr;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal Expressions exprs;
nonterminal Expressions block_exprs;
nonterminal Expression block_expr_part;
nonterminal let let_exprs;
nonterminal Expression let_expr_part;
nonterminal Cases cases;

/* Precedence declarations go here. */
precedence left LT, LE, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left NOT, NEG;


program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
	;

class_list
	/* single class */
	::= class:c
	    {: 
			RESULT = new Classes(curr_lineno());
			RESULT = RESULT.appendElement(c);
		:}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error SEMI
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= 
	/* empty */
		{: RESULT = new Features(curr_lineno()); :}
	|	feature:f
	    {: RESULT = new Features(curr_lineno()).appendElement(f); :}
	|	dummy_feature_list:dl feature:f
		{: RESULT = dl.appendElement(f); :}
	;

feature
	::=
	/* 方法描述 */ 
		OBJECTID:name LPAREN formal_list:fl RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), name, fl, t, e); :}
	|	OBJECTID:name COLON TYPEID:t SEMI
		{:
			no_expr no = new no_expr(curr_lineno()); 
			RESULT = new attr(curr_lineno(), name, t, no); 
		:}
	|	OBJECTID:name COLON TYPEID:t ASSIGN expr:e SEMI
		{: RESULT = new attr(curr_lineno(), name, t, e); :}	
	|	error SEMI
	;

formal_list
	::=
	{:
		RESULT = new Formals(curr_lineno());
	:} 
	|	formal:f
	{: 
		RESULT = new Formals(curr_lineno());
		RESULT = RESULT.appendElement(f); 
	:}
	|	formal_list:fl COMMA formal:f
	{: RESULT = fl.appendElement(f); :}
	;

formal
	::=
	OBJECTID:name COLON TYPEID:t
	{: RESULT = new  formalc(curr_lineno(), name, t); :}
	;

/* Dispatch使用 */
exprs ::=
	{:
		RESULT = new Expressions(curr_lineno());
	:}
	|	expr:e
	{: 
		RESULT = new Expressions(curr_lineno());
		RESULT = RESULT.appendElement(e);
	:}
	| exprs:es COMMA expr:e
	{: RESULT = es.appendElement(e); :}
	;

/* {[[expr;]]+} 中的 expr列表,注意,至少有一个expr */
block_exprs ::= 
	block_expr_part:b
	{: 
		RESULT = new Expressions(curr_lineno());
		RESULT.appendElement(b); 
	:}
	| exprs:es block_expr_part:e
	{:
		RESULT = es.appendElement(e); 
	:}
	| error RBRACE
	;

/* 为了处理错误控制 */
block_expr_part ::=
	expr:e SEMI
	{: 
		RESULT = e;
	:}
	| error SEMI
	;


/* 以递归嵌套let expr的方式来实现let的多重声明并且满足前面的let声明是后面的scope */
let_exprs ::=
		OBJECTID:name COLON TYPEID:t IN expr:e
	{:
		no_expr no = new no_expr(curr_lineno()); 
		RESULT = new let(curr_lineno(), name, t, no, e);
	:}
	|	OBJECTID:name COLON TYPEID:t ASSIGN expr:e IN expr:e2
	{:
		RESULT = new let(curr_lineno(), name, t, e, e2);
	:}
	|	let_exprs:l COMMA OBJECTID:name COLON TYPEID:t ASSIGN expr:e
	{:
		RESULT = new let(curr_lineno(), name, t, e, l);
	:}
	|	let_exprs:l COMMA OBJECTID:name COLON TYPEID:t
	{:
		no_expr no = new no_expr(curr_lineno()); 
		RESULT = new let(curr_lineno(), name, t, no, l);
	:}
	|	error COMMA
	;

	

cases ::=
		OBJECTID:name COLON TYPEID:t DARROW expr:e SEMI
		{: 
			branch branch = new branch(curr_lineno(), name, t, e);
			RESULT = new Cases(curr_lineno()); 
			RESULT = RESULT.appendElement(branch);
		:}
	|	cases:c OBJECTID:name COLON TYPEID:t DARROW expr:e SEMI
		{:
			branch branch = new branch(curr_lineno(), name, t, e); 
			RESULT = c.appendElement(branch); 
		:}
	;

expr ::= 
	/* 赋值expression */
		OBJECTID:name ASSIGN expr:e
	{: RESULT = new assign(curr_lineno(), name, e); :}
	/* normal dispatch */
	|	expr:e DOT OBJECTID:name LPAREN exprs:es RPAREN
	{: RESULT = new dispatch(curr_lineno(), e, name, es); :}
	/* static dispatch */
	|	expr:e AT TYPEID:t DOT OBJECTID:name LPAREN exprs:es RPAREN
	{: RESULT = new static_dispatch(curr_lineno(), e, t, name, es); :}
	/* no expr dispatch */
	|	OBJECTID:name LPAREN exprs:es RPAREN
	{:
		no_expr no = new no_expr(curr_lineno()); 
		RESULT = new dispatch(curr_lineno(), no, name, es);
	:}
	|	IF expr:e1 THEN expr:e2 ELSE expr:e3 FI	
	{: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
	|	WHILE expr:e1 LOOP expr:e2 POOL
	{: RESULT = new loop(curr_lineno(), e1, e2); :}
	|	LBRACE block_exprs:es RBRACE
	{: RESULT = new block(curr_lineno(), es); :}
	|	LET let_exprs:l
	{: RESULT = l; :}
	|	CASE expr:e OF cases:c ESAC
	{: RESULT = new typcase(curr_lineno(), e, c); :}
	|	NEW TYPEID:t
	{: RESULT = new new_(curr_lineno(), t); :}
	|	ISVOID expr:e
	{: RESULT = new isvoid(curr_lineno(), e); :}
	|	expr:e1 PLUS expr:e2
	{: RESULT = new plus(curr_lineno(), e1, e2); :}	
	|	expr:e1 MINUS expr:e2
	{: RESULT = new sub(curr_lineno(), e1, e2); :}
	| 	expr:e1 MULT expr:e2
	{: RESULT = new mul(curr_lineno(), e1, e2); :}
	|	expr:e1 DIV expr:e2
	{: RESULT = new divide(curr_lineno(), e1, e2); :}
	|	NEG expr:e
	{: RESULT = new neg(curr_lineno(), e); :}
	|	expr:e1 LT expr:e2
	{: RESULT = new lt(curr_lineno(), e1, e2); :}
	|	expr:e1 LE expr:e2
	{: RESULT = new leq(curr_lineno(), e1, e2); :}
	| 	expr:e1 EQ expr:e2
	{: RESULT = new eq(curr_lineno(), e1, e2); :}
	|	NOT expr:e
	{: RESULT = new comp(curr_lineno(), e); :}
	|	(expr:e)
	{: RESULT = e; :}
	|	OBJECTID:name
	{: RESULT = new object(curr_lineno(), name); :}
	|	INT_CONST:i
	{: RESULT = new int_const(curr_lineno(), i); :}
	|	STR_CONST:s
	{: RESULT = new string_const(curr_lineno(), s); :}
	|	BOOL_CONST:b
	{: RESULT = new bool_const(curr_lineno(), b); :} 
	;
